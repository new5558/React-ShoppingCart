{"version":3,"sources":["component/Card.js","component/CardList.js","component/TypeBox.js","container/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","id","onDeleteItem","react_default","a","createElement","className","onClick","CardList","_ref$arrayOfNamesObj","arrayOfNamesObj","arayOfCards","map","_ref2","key","TypeBox","onTypeBoxPress","textField","onTypeBoxChange","value","type","onKeyPress","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setState","previousState","list","filter","item","onAddItem","event","target","concat","toConsumableArray","counter","state","Component","Boolean","window","location","hostname","match","ReactDOM","render","container_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MAEeA,EAAA,SAAAC,GAAmC,IAAzBC,EAAyBD,EAAzBC,KAAMC,EAAmBF,EAAnBE,GAAIC,EAAeH,EAAfG,aAC/B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXH,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,UAAQC,UAAU,MAAMC,QAAS,kBAAML,EAAaD,KAApD,YCHGO,EAAA,SAAAT,GAA+C,IAAAU,EAAAV,EAArCW,uBAAqC,IAAAD,EAAnB,GAAmBA,EAAfP,EAAeH,EAAfG,aACrCS,EAAcD,EAAgBE,IAAI,SAAAC,GAAgB,IAAdb,EAAca,EAAdb,KAAMC,EAAQY,EAARZ,GAC5C,OAAQE,EAAAC,EAAAC,cAACP,EAAD,CAAMI,aAAcA,EAAcF,KAAQA,EAAMc,IAAKb,EAAIA,GAAIA,MAEzE,OACIE,EAAAC,EAAAC,cAAA,WACKM,ICPEI,EAAA,SAAAhB,GAAuD,IAA7CiB,EAA6CjB,EAA7CiB,eAAgBC,EAA6BlB,EAA7BkB,UAAWC,EAAkBnB,EAAlBmB,gBAChD,OACIf,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOc,MAAOF,EAAWG,KAAK,OAAOC,WAAYL,EAAgBM,SAAUJ,MCuDxEK,cAvDb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAQFzB,aAAe,SAACD,GACduB,EAAKO,SAAS,SAACC,GAAD,MAAoB,CAChCC,KAAOD,EAAcC,KAAKC,OAAO,SAAAC,GAC/B,OAAOA,EAAKlC,KAAOA,QAZXuB,EAiBdY,UAAY,SAACC,GACX,IAAMrC,EAAOqC,EAAMC,OAAOnB,MACd,KAATnB,GAGHwB,EAAKO,SAAS,SAACC,GAAD,MAAoB,CAChCC,KAAI,GAAAM,OAAAd,OAAAe,EAAA,EAAAf,CAAOO,EAAcC,MAArB,CAA2B,CAC7BjC,KAAMA,EACNC,KAAMuB,EAAKiB,eAzBHjB,EA8BdR,eAAiB,SAACqB,GACC,UAAdA,EAAMvB,MACPU,EAAKY,UAAUC,GACfb,EAAKO,SAAS,CACZd,UAAW,OAlCHO,EAuCdN,gBAAkB,SAACmB,GACjBb,EAAKO,SAAS,CACZd,UAAWoB,EAAMC,OAAOnB,SAvC1BK,EAAKiB,QAAU,EACfjB,EAAKkB,MAAQ,CACXT,KAAM,GACNhB,UAAW,IALDO,wEA8CZ,OACErB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACU,EAAD,CAASE,UAAWU,KAAKe,MAAMzB,UAAWD,eAAgBW,KAAKX,eAAgBE,gBAAiBS,KAAKT,kBACrGf,EAAAC,EAAAC,cAACG,EAAD,CAAUE,gBAAiBiB,KAAKe,MAAMT,KAAM/B,aAAcyB,KAAKzB,uBAlDrDyC,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.108f57ab.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function({name, id, onDeleteItem}) {\r\n    return(\r\n        <div className=\"flex items-center\">\r\n            <h2>{name}</h2>\r\n            <button className=\"ml3\" onClick={() => onDeleteItem(id)}>delete</button>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport Card from './Card';\r\n\r\nexport default function({arrayOfNamesObj = [], onDeleteItem}) {\r\n    const arayOfCards = arrayOfNamesObj.map(({name, id}) => {\r\n        return (<Card onDeleteItem={onDeleteItem} name = {name} key={id} id={id}/>)\r\n    })\r\n    return(\r\n        <div>\r\n            {arayOfCards}\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport default function({onTypeBoxPress, textField, onTypeBoxChange}) {\r\n    return(\r\n        <div>\r\n            <input value={textField} type=\"text\" onKeyPress={onTypeBoxPress} onChange={onTypeBoxChange}/>\r\n        </div>\r\n    );\r\n\r\n}","import React, { Component } from 'react';\nimport CardList from '../component/CardList';\nimport TypeBox from '../component/TypeBox';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.counter = 0;\n    this.state = {\n      list: [],\n      textField: '',\n    }\n  }\n\n  onDeleteItem = (id) => {\n    this.setState((previousState) => ({\n      list : previousState.list.filter(item => {\n        return item.id !== id;\n      })\n    }))\n  }\n\n  onAddItem = (event) => {\n    const name = event.target.value;\n    if(name === \"\") {\n        return;\n    }\n    this.setState((previousState) => ({\n      list : [...previousState.list, {\n        name: name,\n        id: ++this.counter,\n      }]\n    }))\n  }\n\n  onTypeBoxPress = (event) => {\n    if(event.key === 'Enter' ) {\n      this.onAddItem(event);\n      this.setState({\n        textField: '',\n      })\n    }\n  }\n\n  onTypeBoxChange = (event) => {\n    this.setState({\n      textField: event.target.value,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <TypeBox textField={this.state.textField} onTypeBoxPress={this.onTypeBoxPress} onTypeBoxChange={this.onTypeBoxChange}/>\n        <CardList arrayOfNamesObj={this.state.list} onDeleteItem={this.onDeleteItem}/>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}